// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pkg "prp.com/sparkly/internal/pkg"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetActiveUsersByDuration provides a mock function with given fields: ctx, duration
func (_m *Repository) GetActiveUsersByDuration(ctx context.Context, duration time.Duration) ([]primitive.M, error) {
	ret := _m.Called(ctx, duration)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveUsersByDuration")
	}

	var r0 []primitive.M
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) ([]primitive.M, error)); ok {
		return rf(ctx, duration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) []primitive.M); ok {
		r0 = rf(ctx, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]primitive.M)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = rf(ctx, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetActiveUsersByDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveUsersByDuration'
type Repository_GetActiveUsersByDuration_Call struct {
	*mock.Call
}

// GetActiveUsersByDuration is a helper method to define mock.On call
//   - ctx context.Context
//   - duration time.Duration
func (_e *Repository_Expecter) GetActiveUsersByDuration(ctx interface{}, duration interface{}) *Repository_GetActiveUsersByDuration_Call {
	return &Repository_GetActiveUsersByDuration_Call{Call: _e.mock.On("GetActiveUsersByDuration", ctx, duration)}
}

func (_c *Repository_GetActiveUsersByDuration_Call) Run(run func(ctx context.Context, duration time.Duration)) *Repository_GetActiveUsersByDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *Repository_GetActiveUsersByDuration_Call) Return(_a0 []primitive.M, _a1 error) *Repository_GetActiveUsersByDuration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetActiveUsersByDuration_Call) RunAndReturn(run func(context.Context, time.Duration) ([]primitive.M, error)) *Repository_GetActiveUsersByDuration_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveUsersCountByDuration provides a mock function with given fields: ctx, duration
func (_m *Repository) GetActiveUsersCountByDuration(ctx context.Context, duration time.Duration) (int, error) {
	ret := _m.Called(ctx, duration)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveUsersCountByDuration")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) (int, error)); ok {
		return rf(ctx, duration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) int); ok {
		r0 = rf(ctx, duration)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = rf(ctx, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetActiveUsersCountByDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveUsersCountByDuration'
type Repository_GetActiveUsersCountByDuration_Call struct {
	*mock.Call
}

// GetActiveUsersCountByDuration is a helper method to define mock.On call
//   - ctx context.Context
//   - duration time.Duration
func (_e *Repository_Expecter) GetActiveUsersCountByDuration(ctx interface{}, duration interface{}) *Repository_GetActiveUsersCountByDuration_Call {
	return &Repository_GetActiveUsersCountByDuration_Call{Call: _e.mock.On("GetActiveUsersCountByDuration", ctx, duration)}
}

func (_c *Repository_GetActiveUsersCountByDuration_Call) Run(run func(ctx context.Context, duration time.Duration)) *Repository_GetActiveUsersCountByDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *Repository_GetActiveUsersCountByDuration_Call) Return(_a0 int, _a1 error) *Repository_GetActiveUsersCountByDuration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetActiveUsersCountByDuration_Call) RunAndReturn(run func(context.Context, time.Duration) (int, error)) *Repository_GetActiveUsersCountByDuration_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, activity
func (_m *Repository) Insert(ctx context.Context, activity pkg.LoginActivity) error {
	ret := _m.Called(ctx, activity)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pkg.LoginActivity) error); ok {
		r0 = rf(ctx, activity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type Repository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - activity pkg.LoginActivity
func (_e *Repository_Expecter) Insert(ctx interface{}, activity interface{}) *Repository_Insert_Call {
	return &Repository_Insert_Call{Call: _e.mock.On("Insert", ctx, activity)}
}

func (_c *Repository_Insert_Call) Run(run func(ctx context.Context, activity pkg.LoginActivity)) *Repository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkg.LoginActivity))
	})
	return _c
}

func (_c *Repository_Insert_Call) Return(_a0 error) *Repository_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Insert_Call) RunAndReturn(run func(context.Context, pkg.LoginActivity) error) *Repository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
