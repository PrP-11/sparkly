// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// CacheService is an autogenerated mock type for the CacheService type
type CacheService struct {
	mock.Mock
}

type CacheService_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheService) EXPECT() *CacheService_Expecter {
	return &CacheService_Expecter{mock: &_m.Mock}
}

// DeleteKeys provides a mock function with given fields: ctx, keys
func (_m *CacheService) DeleteKeys(ctx context.Context, keys ...string) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeys")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = rf(ctx, keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheService_DeleteKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKeys'
type CacheService_DeleteKeys_Call struct {
	*mock.Call
}

// DeleteKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *CacheService_Expecter) DeleteKeys(ctx interface{}, keys ...interface{}) *CacheService_DeleteKeys_Call {
	return &CacheService_DeleteKeys_Call{Call: _e.mock.On("DeleteKeys",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *CacheService_DeleteKeys_Call) Run(run func(ctx context.Context, keys ...string)) *CacheService_DeleteKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *CacheService_DeleteKeys_Call) Return(_a0 error) *CacheService_DeleteKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheService_DeleteKeys_Call) RunAndReturn(run func(context.Context, ...string) error) *CacheService_DeleteKeys_Call {
	_c.Call.Return(run)
	return _c
}

// Expire provides a mock function with given fields: ctx, key, duration
func (_m *CacheService) Expire(ctx context.Context, key string, duration time.Duration) {
	_m.Called(ctx, key, duration)
}

// CacheService_Expire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expire'
type CacheService_Expire_Call struct {
	*mock.Call
}

// Expire is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - duration time.Duration
func (_e *CacheService_Expecter) Expire(ctx interface{}, key interface{}, duration interface{}) *CacheService_Expire_Call {
	return &CacheService_Expire_Call{Call: _e.mock.On("Expire", ctx, key, duration)}
}

func (_c *CacheService_Expire_Call) Run(run func(ctx context.Context, key string, duration time.Duration)) *CacheService_Expire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *CacheService_Expire_Call) Return() *CacheService_Expire_Call {
	_c.Call.Return()
	return _c
}

func (_c *CacheService_Expire_Call) RunAndReturn(run func(context.Context, string, time.Duration)) *CacheService_Expire_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *CacheService) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CacheService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *CacheService_Expecter) Get(ctx interface{}, key interface{}) *CacheService_Get_Call {
	return &CacheService_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *CacheService_Get_Call) Run(run func(ctx context.Context, key string)) *CacheService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CacheService_Get_Call) Return(_a0 string, _a1 error) *CacheService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheService_Get_Call) RunAndReturn(run func(context.Context, string) (string, error)) *CacheService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, duration
func (_m *CacheService) Set(ctx context.Context, key string, value interface{}, duration time.Duration) error {
	ret := _m.Called(ctx, key, value, duration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, value, duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheService_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type CacheService_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value interface{}
//   - duration time.Duration
func (_e *CacheService_Expecter) Set(ctx interface{}, key interface{}, value interface{}, duration interface{}) *CacheService_Set_Call {
	return &CacheService_Set_Call{Call: _e.mock.On("Set", ctx, key, value, duration)}
}

func (_c *CacheService_Set_Call) Run(run func(ctx context.Context, key string, value interface{}, duration time.Duration)) *CacheService_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *CacheService_Set_Call) Return(_a0 error) *CacheService_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheService_Set_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) error) *CacheService_Set_Call {
	_c.Call.Return(run)
	return _c
}

// ZAdd provides a mock function with given fields: ctx, key, score, member, remMax
func (_m *CacheService) ZAdd(ctx context.Context, key string, score float64, member interface{}, remMax int64) {
	_m.Called(ctx, key, score, member, remMax)
}

// CacheService_ZAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAdd'
type CacheService_ZAdd_Call struct {
	*mock.Call
}

// ZAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - score float64
//   - member interface{}
//   - remMax int64
func (_e *CacheService_Expecter) ZAdd(ctx interface{}, key interface{}, score interface{}, member interface{}, remMax interface{}) *CacheService_ZAdd_Call {
	return &CacheService_ZAdd_Call{Call: _e.mock.On("ZAdd", ctx, key, score, member, remMax)}
}

func (_c *CacheService_ZAdd_Call) Run(run func(ctx context.Context, key string, score float64, member interface{}, remMax int64)) *CacheService_ZAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(interface{}), args[4].(int64))
	})
	return _c
}

func (_c *CacheService_ZAdd_Call) Return() *CacheService_ZAdd_Call {
	_c.Call.Return()
	return _c
}

func (_c *CacheService_ZAdd_Call) RunAndReturn(run func(context.Context, string, float64, interface{}, int64)) *CacheService_ZAdd_Call {
	_c.Call.Return(run)
	return _c
}

// ZCount provides a mock function with given fields: ctx, key, cutoff
func (_m *CacheService) ZCount(ctx context.Context, key string, cutoff int64) (int64, error) {
	ret := _m.Called(ctx, key, cutoff)

	if len(ret) == 0 {
		panic("no return value specified for ZCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (int64, error)); ok {
		return rf(ctx, key, cutoff)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) int64); ok {
		r0 = rf(ctx, key, cutoff)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, key, cutoff)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheService_ZCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZCount'
type CacheService_ZCount_Call struct {
	*mock.Call
}

// ZCount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - cutoff int64
func (_e *CacheService_Expecter) ZCount(ctx interface{}, key interface{}, cutoff interface{}) *CacheService_ZCount_Call {
	return &CacheService_ZCount_Call{Call: _e.mock.On("ZCount", ctx, key, cutoff)}
}

func (_c *CacheService_ZCount_Call) Run(run func(ctx context.Context, key string, cutoff int64)) *CacheService_ZCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *CacheService_ZCount_Call) Return(_a0 int64, _a1 error) *CacheService_ZCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheService_ZCount_Call) RunAndReturn(run func(context.Context, string, int64) (int64, error)) *CacheService_ZCount_Call {
	_c.Call.Return(run)
	return _c
}

// ZIncrBy provides a mock function with given fields: ctx, key, member, increment
func (_m *CacheService) ZIncrBy(ctx context.Context, key string, member string, increment float64) {
	_m.Called(ctx, key, member, increment)
}

// CacheService_ZIncrBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZIncrBy'
type CacheService_ZIncrBy_Call struct {
	*mock.Call
}

// ZIncrBy is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member string
//   - increment float64
func (_e *CacheService_Expecter) ZIncrBy(ctx interface{}, key interface{}, member interface{}, increment interface{}) *CacheService_ZIncrBy_Call {
	return &CacheService_ZIncrBy_Call{Call: _e.mock.On("ZIncrBy", ctx, key, member, increment)}
}

func (_c *CacheService_ZIncrBy_Call) Run(run func(ctx context.Context, key string, member string, increment float64)) *CacheService_ZIncrBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(float64))
	})
	return _c
}

func (_c *CacheService_ZIncrBy_Call) Return() *CacheService_ZIncrBy_Call {
	_c.Call.Return()
	return _c
}

func (_c *CacheService_ZIncrBy_Call) RunAndReturn(run func(context.Context, string, string, float64)) *CacheService_ZIncrBy_Call {
	_c.Call.Return(run)
	return _c
}

// ZRevRangeWithScores provides a mock function with given fields: ctx, key, limit
func (_m *CacheService) ZRevRangeWithScores(ctx context.Context, key string, limit int64) (map[string]float64, error) {
	ret := _m.Called(ctx, key, limit)

	if len(ret) == 0 {
		panic("no return value specified for ZRevRangeWithScores")
	}

	var r0 map[string]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (map[string]float64, error)); ok {
		return rf(ctx, key, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) map[string]float64); ok {
		r0 = rf(ctx, key, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, key, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheService_ZRevRangeWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRevRangeWithScores'
type CacheService_ZRevRangeWithScores_Call struct {
	*mock.Call
}

// ZRevRangeWithScores is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - limit int64
func (_e *CacheService_Expecter) ZRevRangeWithScores(ctx interface{}, key interface{}, limit interface{}) *CacheService_ZRevRangeWithScores_Call {
	return &CacheService_ZRevRangeWithScores_Call{Call: _e.mock.On("ZRevRangeWithScores", ctx, key, limit)}
}

func (_c *CacheService_ZRevRangeWithScores_Call) Run(run func(ctx context.Context, key string, limit int64)) *CacheService_ZRevRangeWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *CacheService_ZRevRangeWithScores_Call) Return(_a0 map[string]float64, _a1 error) *CacheService_ZRevRangeWithScores_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheService_ZRevRangeWithScores_Call) RunAndReturn(run func(context.Context, string, int64) (map[string]float64, error)) *CacheService_ZRevRangeWithScores_Call {
	_c.Call.Return(run)
	return _c
}

// NewCacheService creates a new instance of CacheService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheService {
	mock := &CacheService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
