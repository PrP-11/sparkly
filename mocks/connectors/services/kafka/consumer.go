// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sarama "github.com/IBM/sarama"
)

// ConsumerService is an autogenerated mock type for the ConsumerService type
type ConsumerService struct {
	mock.Mock
}

type ConsumerService_Expecter struct {
	mock *mock.Mock
}

func (_m *ConsumerService) EXPECT() *ConsumerService_Expecter {
	return &ConsumerService_Expecter{mock: &_m.Mock}
}

// Consume provides a mock function with given fields: ctx, consumerFunc
func (_m *ConsumerService) Consume(ctx context.Context, consumerFunc func(context.Context, *sarama.ConsumerMessage) error) {
	_m.Called(ctx, consumerFunc)
}

// ConsumerService_Consume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consume'
type ConsumerService_Consume_Call struct {
	*mock.Call
}

// Consume is a helper method to define mock.On call
//   - ctx context.Context
//   - consumerFunc func(context.Context , *sarama.ConsumerMessage) error
func (_e *ConsumerService_Expecter) Consume(ctx interface{}, consumerFunc interface{}) *ConsumerService_Consume_Call {
	return &ConsumerService_Consume_Call{Call: _e.mock.On("Consume", ctx, consumerFunc)}
}

func (_c *ConsumerService_Consume_Call) Run(run func(ctx context.Context, consumerFunc func(context.Context, *sarama.ConsumerMessage) error)) *ConsumerService_Consume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context, *sarama.ConsumerMessage) error))
	})
	return _c
}

func (_c *ConsumerService_Consume_Call) Return() *ConsumerService_Consume_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConsumerService_Consume_Call) RunAndReturn(run func(context.Context, func(context.Context, *sarama.ConsumerMessage) error)) *ConsumerService_Consume_Call {
	_c.Call.Return(run)
	return _c
}

// NewConsumerService creates a new instance of ConsumerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerService {
	mock := &ConsumerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
