// Code generated by mockery v2.43.2. DO NOT EDIT.

package handlers

import (
	mock "github.com/stretchr/testify/mock"
	handlers "prp.com/sparkly/internal/ports/rest/handlers"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

type Handler_Expecter struct {
	mock *mock.Mock
}

func (_m *Handler) EXPECT() *Handler_Expecter {
	return &Handler_Expecter{mock: &_m.Mock}
}

// LoginsHandler provides a mock function with given fields:
func (_m *Handler) LoginsHandler() handlers.LoginsHandler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoginsHandler")
	}

	var r0 handlers.LoginsHandler
	if rf, ok := ret.Get(0).(func() handlers.LoginsHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handlers.LoginsHandler)
		}
	}

	return r0
}

// Handler_LoginsHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginsHandler'
type Handler_LoginsHandler_Call struct {
	*mock.Call
}

// LoginsHandler is a helper method to define mock.On call
func (_e *Handler_Expecter) LoginsHandler() *Handler_LoginsHandler_Call {
	return &Handler_LoginsHandler_Call{Call: _e.mock.On("LoginsHandler")}
}

func (_c *Handler_LoginsHandler_Call) Run(run func()) *Handler_LoginsHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Handler_LoginsHandler_Call) Return(_a0 handlers.LoginsHandler) *Handler_LoginsHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handler_LoginsHandler_Call) RunAndReturn(run func() handlers.LoginsHandler) *Handler_LoginsHandler_Call {
	_c.Call.Return(run)
	return _c
}

// PostsHandler provides a mock function with given fields:
func (_m *Handler) PostsHandler() handlers.PostsHandler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PostsHandler")
	}

	var r0 handlers.PostsHandler
	if rf, ok := ret.Get(0).(func() handlers.PostsHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handlers.PostsHandler)
		}
	}

	return r0
}

// Handler_PostsHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostsHandler'
type Handler_PostsHandler_Call struct {
	*mock.Call
}

// PostsHandler is a helper method to define mock.On call
func (_e *Handler_Expecter) PostsHandler() *Handler_PostsHandler_Call {
	return &Handler_PostsHandler_Call{Call: _e.mock.On("PostsHandler")}
}

func (_c *Handler_PostsHandler_Call) Run(run func()) *Handler_PostsHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Handler_PostsHandler_Call) Return(_a0 handlers.PostsHandler) *Handler_PostsHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handler_PostsHandler_Call) RunAndReturn(run func() handlers.PostsHandler) *Handler_PostsHandler_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
