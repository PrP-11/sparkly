// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	pkg "prp.com/sparkly/internal/pkg"

	time "time"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// BackfillPolularPosts provides a mock function with given fields: ctx
func (_m *Service) BackfillPolularPosts(ctx context.Context) {
	_m.Called(ctx)
}

// Service_BackfillPolularPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackfillPolularPosts'
type Service_BackfillPolularPosts_Call struct {
	*mock.Call
}

// BackfillPolularPosts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Service_Expecter) BackfillPolularPosts(ctx interface{}) *Service_BackfillPolularPosts_Call {
	return &Service_BackfillPolularPosts_Call{Call: _e.mock.On("BackfillPolularPosts", ctx)}
}

func (_c *Service_BackfillPolularPosts_Call) Run(run func(ctx context.Context)) *Service_BackfillPolularPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Service_BackfillPolularPosts_Call) Return() *Service_BackfillPolularPosts_Call {
	_c.Call.Return()
	return _c
}

func (_c *Service_BackfillPolularPosts_Call) RunAndReturn(run func(context.Context)) *Service_BackfillPolularPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetPopularPosts provides a mock function with given fields: ctx, timeFrames, limit
func (_m *Service) GetPopularPosts(ctx context.Context, timeFrames map[string]time.Duration, limit int) (map[string][]pkg.PopularPost, error) {
	ret := _m.Called(ctx, timeFrames, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPopularPosts")
	}

	var r0 map[string][]pkg.PopularPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]time.Duration, int) (map[string][]pkg.PopularPost, error)); ok {
		return rf(ctx, timeFrames, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]time.Duration, int) map[string][]pkg.PopularPost); ok {
		r0 = rf(ctx, timeFrames, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]pkg.PopularPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]time.Duration, int) error); ok {
		r1 = rf(ctx, timeFrames, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetPopularPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPopularPosts'
type Service_GetPopularPosts_Call struct {
	*mock.Call
}

// GetPopularPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - timeFrames map[string]time.Duration
//   - limit int
func (_e *Service_Expecter) GetPopularPosts(ctx interface{}, timeFrames interface{}, limit interface{}) *Service_GetPopularPosts_Call {
	return &Service_GetPopularPosts_Call{Call: _e.mock.On("GetPopularPosts", ctx, timeFrames, limit)}
}

func (_c *Service_GetPopularPosts_Call) Run(run func(ctx context.Context, timeFrames map[string]time.Duration, limit int)) *Service_GetPopularPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]time.Duration), args[2].(int))
	})
	return _c
}

func (_c *Service_GetPopularPosts_Call) Return(_a0 map[string][]pkg.PopularPost, _a1 error) *Service_GetPopularPosts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetPopularPosts_Call) RunAndReturn(run func(context.Context, map[string]time.Duration, int) (map[string][]pkg.PopularPost, error)) *Service_GetPopularPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetPopularPostsByDuration provides a mock function with given fields: ctx, key, limit
func (_m *Service) GetPopularPostsByDuration(ctx context.Context, key string, limit int) ([]pkg.PopularPost, error) {
	ret := _m.Called(ctx, key, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPopularPostsByDuration")
	}

	var r0 []pkg.PopularPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]pkg.PopularPost, error)); ok {
		return rf(ctx, key, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []pkg.PopularPost); ok {
		r0 = rf(ctx, key, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkg.PopularPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, key, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetPopularPostsByDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPopularPostsByDuration'
type Service_GetPopularPostsByDuration_Call struct {
	*mock.Call
}

// GetPopularPostsByDuration is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - limit int
func (_e *Service_Expecter) GetPopularPostsByDuration(ctx interface{}, key interface{}, limit interface{}) *Service_GetPopularPostsByDuration_Call {
	return &Service_GetPopularPostsByDuration_Call{Call: _e.mock.On("GetPopularPostsByDuration", ctx, key, limit)}
}

func (_c *Service_GetPopularPostsByDuration_Call) Run(run func(ctx context.Context, key string, limit int)) *Service_GetPopularPostsByDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *Service_GetPopularPostsByDuration_Call) Return(_a0 []pkg.PopularPost, _a1 error) *Service_GetPopularPostsByDuration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetPopularPostsByDuration_Call) RunAndReturn(run func(context.Context, string, int) ([]pkg.PopularPost, error)) *Service_GetPopularPostsByDuration_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with given fields: ctx, activity
func (_m *Service) Log(ctx context.Context, activity pkg.PostInteraction) error {
	ret := _m.Called(ctx, activity)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pkg.PostInteraction) error); ok {
		r0 = rf(ctx, activity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type Service_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - ctx context.Context
//   - activity pkg.PostInteraction
func (_e *Service_Expecter) Log(ctx interface{}, activity interface{}) *Service_Log_Call {
	return &Service_Log_Call{Call: _e.mock.On("Log", ctx, activity)}
}

func (_c *Service_Log_Call) Run(run func(ctx context.Context, activity pkg.PostInteraction)) *Service_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkg.PostInteraction))
	})
	return _c
}

func (_c *Service_Log_Call) Return(_a0 error) *Service_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Log_Call) RunAndReturn(run func(context.Context, pkg.PostInteraction) error) *Service_Log_Call {
	_c.Call.Return(run)
	return _c
}

// PushToQueue provides a mock function with given fields: ctx, activity
func (_m *Service) PushToQueue(ctx context.Context, activity pkg.PostInteraction) {
	_m.Called(ctx, activity)
}

// Service_PushToQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushToQueue'
type Service_PushToQueue_Call struct {
	*mock.Call
}

// PushToQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - activity pkg.PostInteraction
func (_e *Service_Expecter) PushToQueue(ctx interface{}, activity interface{}) *Service_PushToQueue_Call {
	return &Service_PushToQueue_Call{Call: _e.mock.On("PushToQueue", ctx, activity)}
}

func (_c *Service_PushToQueue_Call) Run(run func(ctx context.Context, activity pkg.PostInteraction)) *Service_PushToQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkg.PostInteraction))
	})
	return _c
}

func (_c *Service_PushToQueue_Call) Return() *Service_PushToQueue_Call {
	_c.Call.Return()
	return _c
}

func (_c *Service_PushToQueue_Call) RunAndReturn(run func(context.Context, pkg.PostInteraction)) *Service_PushToQueue_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
