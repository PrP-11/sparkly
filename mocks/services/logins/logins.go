// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pkg "prp.com/sparkly/internal/pkg"

	time "time"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// BackfillActiveUsers provides a mock function with given fields: ctx
func (_m *Service) BackfillActiveUsers(ctx context.Context) {
	_m.Called(ctx)
}

// Service_BackfillActiveUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackfillActiveUsers'
type Service_BackfillActiveUsers_Call struct {
	*mock.Call
}

// BackfillActiveUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Service_Expecter) BackfillActiveUsers(ctx interface{}) *Service_BackfillActiveUsers_Call {
	return &Service_BackfillActiveUsers_Call{Call: _e.mock.On("BackfillActiveUsers", ctx)}
}

func (_c *Service_BackfillActiveUsers_Call) Run(run func(ctx context.Context)) *Service_BackfillActiveUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Service_BackfillActiveUsers_Call) Return() *Service_BackfillActiveUsers_Call {
	_c.Call.Return()
	return _c
}

func (_c *Service_BackfillActiveUsers_Call) RunAndReturn(run func(context.Context)) *Service_BackfillActiveUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveUsers provides a mock function with given fields: ctx, timeFrames
func (_m *Service) GetActiveUsers(ctx context.Context, timeFrames map[string]time.Duration) (map[string]int, error) {
	ret := _m.Called(ctx, timeFrames)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveUsers")
	}

	var r0 map[string]int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]time.Duration) (map[string]int, error)); ok {
		return rf(ctx, timeFrames)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]time.Duration) map[string]int); ok {
		r0 = rf(ctx, timeFrames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]time.Duration) error); ok {
		r1 = rf(ctx, timeFrames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetActiveUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveUsers'
type Service_GetActiveUsers_Call struct {
	*mock.Call
}

// GetActiveUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - timeFrames map[string]time.Duration
func (_e *Service_Expecter) GetActiveUsers(ctx interface{}, timeFrames interface{}) *Service_GetActiveUsers_Call {
	return &Service_GetActiveUsers_Call{Call: _e.mock.On("GetActiveUsers", ctx, timeFrames)}
}

func (_c *Service_GetActiveUsers_Call) Run(run func(ctx context.Context, timeFrames map[string]time.Duration)) *Service_GetActiveUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]time.Duration))
	})
	return _c
}

func (_c *Service_GetActiveUsers_Call) Return(_a0 map[string]int, _a1 error) *Service_GetActiveUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetActiveUsers_Call) RunAndReturn(run func(context.Context, map[string]time.Duration) (map[string]int, error)) *Service_GetActiveUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveUsersByDuration provides a mock function with given fields: ctx, key
func (_m *Service) GetActiveUsersByDuration(ctx context.Context, key string) (int, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveUsersByDuration")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetActiveUsersByDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveUsersByDuration'
type Service_GetActiveUsersByDuration_Call struct {
	*mock.Call
}

// GetActiveUsersByDuration is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Service_Expecter) GetActiveUsersByDuration(ctx interface{}, key interface{}) *Service_GetActiveUsersByDuration_Call {
	return &Service_GetActiveUsersByDuration_Call{Call: _e.mock.On("GetActiveUsersByDuration", ctx, key)}
}

func (_c *Service_GetActiveUsersByDuration_Call) Run(run func(ctx context.Context, key string)) *Service_GetActiveUsersByDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_GetActiveUsersByDuration_Call) Return(_a0 int, _a1 error) *Service_GetActiveUsersByDuration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetActiveUsersByDuration_Call) RunAndReturn(run func(context.Context, string) (int, error)) *Service_GetActiveUsersByDuration_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with given fields: ctx, activity
func (_m *Service) Log(ctx context.Context, activity pkg.LoginActivity) error {
	ret := _m.Called(ctx, activity)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pkg.LoginActivity) error); ok {
		r0 = rf(ctx, activity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type Service_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - ctx context.Context
//   - activity pkg.LoginActivity
func (_e *Service_Expecter) Log(ctx interface{}, activity interface{}) *Service_Log_Call {
	return &Service_Log_Call{Call: _e.mock.On("Log", ctx, activity)}
}

func (_c *Service_Log_Call) Run(run func(ctx context.Context, activity pkg.LoginActivity)) *Service_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkg.LoginActivity))
	})
	return _c
}

func (_c *Service_Log_Call) Return(_a0 error) *Service_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Log_Call) RunAndReturn(run func(context.Context, pkg.LoginActivity) error) *Service_Log_Call {
	_c.Call.Return(run)
	return _c
}

// PushToQueue provides a mock function with given fields: ctx, activity
func (_m *Service) PushToQueue(ctx context.Context, activity pkg.LoginActivity) {
	_m.Called(ctx, activity)
}

// Service_PushToQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushToQueue'
type Service_PushToQueue_Call struct {
	*mock.Call
}

// PushToQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - activity pkg.LoginActivity
func (_e *Service_Expecter) PushToQueue(ctx interface{}, activity interface{}) *Service_PushToQueue_Call {
	return &Service_PushToQueue_Call{Call: _e.mock.On("PushToQueue", ctx, activity)}
}

func (_c *Service_PushToQueue_Call) Run(run func(ctx context.Context, activity pkg.LoginActivity)) *Service_PushToQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkg.LoginActivity))
	})
	return _c
}

func (_c *Service_PushToQueue_Call) Return() *Service_PushToQueue_Call {
	_c.Call.Return()
	return _c
}

func (_c *Service_PushToQueue_Call) RunAndReturn(run func(context.Context, pkg.LoginActivity)) *Service_PushToQueue_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
